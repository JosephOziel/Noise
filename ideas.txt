Pattern Matching from prolog and stuff, also try logic stuff
Take a lot of inspiration from Factor
Combinators from Joy. Also recursive combinators from joy
Array operations and manipulation from array languages like K and APL etc

Rhythm language for MIDI cool rhythms? https://github.com/Jackojc/cane/blob/neo-cane/doc/ideas.md https://nestup.cutelab.nyc/ https://pbat.ch/proj/prop.html

QUOTATIONS: https://docs.factorcode.org/content/article-locals-fry.html 
FRIED QUOTES IMPL AND ARGUMENT QUOTES: https://docs.factorcode.org/content/article-compiler-impl.html https://docs.factorcode.org/content/article-fry.html https://docs.factorcode.org/content/word-fry%2Cfry.html

TREAT PATTERNS AS OBJECTS: with a `match` function to match a pattern to the stack. create special notation for patterns.

DEQUEUE AS UNDERLYING DATASTRUCTURE (implement in prolog):
    Syntax:
        > for the right
        < for the left
    Add function that allows you to rotate the whole deque

FACTOR COMBINATORS: https://docs.factorcode.org/content/article-combinators.html
JOY COMBINATORS: https://github.com/joes-esolangs/cassette/blob/main/examples/combinators.cte 
    https://www.kevinalbrecht.com/code/joy-mirror/joy.html
    https://www.kevinalbrecht.com/code/joy-mirror/j05cmp.html 

WORDS: are just sugar for a quotation. When called put the quotation on the stack and the call word. 
FACTOR WORDS: https://docs.factorcode.org/content/article-words.html
https://docs.factorcode.org/content/article-quotations.html 
STACK STUFF OPERATORS: https://docs.factorcode.org/content/article-shuffle-words.html 

FULL LIST: https://docs.factorcode.org/content/article-handbook-language-reference.html

! And if you want to get meta, quotations are sequences and can be dismantled..
0 [ 2 + ] nth                              ! 2
1 [ 2 + ] nth                              ! +
[ 2 + ] \ - suffix                         ! Quotation [ 2 + - ]

RECURSION
PARSE: EVERYTHING AS A SYMBOL BESIDES LITERALS. LIKE FACTOR, everything is seperated by whitespace
SYMBOLS/LITERALS: 12 -12 1.2 "hi" :hi (atoms)
OBJECTS: words, lists/seqs (maybe not), quotes (fried too), quotations with pattern matching arguments
PATTERNS: treat patterns as objects, with a function "match" to compare them. 

TRY AND CREATE PYTHON INTERFACE

OTHER POSSIBLE NAME: raash (as opposed to noise)

XY LANG: https://www.nsl.com/k/xy/xy.htm